# -*- coding: utf-8 -*-
"""trashmodel완성본4.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/github/db030220/Plogging/blob/main/trashmodel%EC%99%84%EC%84%B1%EB%B3%B84.ipynb
"""

import cv2
import numpy as np
#1차 인공지능
from PIL import Image
import os, glob, numpy as np
from sklearn.model_selection import train_test_split

#fai.py자리

import cv2
import numpy as np
from keras.models import load_model

def predict_trash(new_image_path):
    # 저장된 모델 불러오기
    model = load_model('C:/Users/db030/Desktop/aimodel/fai.h5') 

    # 새로운 이미지 불러오기
    new_image = cv2.imread(new_image_path)

    category_mapping = {0: "person", 1: "hand", 2: "trash"}

    # 이미지가 성공적으로 불러와졌는지 확인
    if new_image is None:
        print("이미지 불러오기 실패")
        return None
    
    image_w = 64
    image_h = 64
    
    # 이미지 크기 조정
    new_image = cv2.resize(new_image, (image_w, image_h))

    # 이미지 전처리
    new_image = new_image.astype(float) / 255

    # 예측 수행
    prediction = model.predict(np.array([new_image]))
    predicted_class = np.argmax(prediction)

    if predicted_class == 0:
        return "사람이 더 많게 찍힌 것으로 추정됩니다. 주의해서 진행해주세요"
    elif predicted_class == 1:
        return "손이 보이도록 찍힌 것으로 추정됩니다. 쓰레기 봉투의 리터가 보일 수 있도록 해주세요."
    elif predicted_class == 2:
        return "쓰레기봉투가 잘 보이네요!"


#2차 인공지능
#커맨드창으로 detect.py를 실행시켜야함.
import cv2
import subprocess
import tempfile
import os
import psutil


def detect_trash(new_image):

    weights_path = os.path.abspath("../exp28-20230604T084521Z-001/exp28/weights/best.pt")
    detect_script = os.path.abspath("../detect.py")

    command = [
        "python",
        detect_script,
        "--weights",
        weights_path,
        "--img",
        "320",
        "--conf",
        "0.5",
        "--source",
        new_image,
        "--save-txt"
    ]

    subprocess.run(command)
    


def display_image(image_path):
    image = cv2.imread(image_path)

    if image is not None:
        cv2.imshow("Image", image)
        cv2.waitKey(0)
        cv2.destroyAllWindows()
    else:
        print("이미지를 읽어올 수 없습니다.")

def find_recent_folder(directory):
    entries = os.listdir(directory)
    folders = [entry for entry in entries if os.path.isdir(os.path.join(directory, entry))]
    sorted_folders = sorted(folders, key=lambda folder: os.path.getctime(os.path.join(directory, folder)))
    if sorted_folders:
        recent_folder = sorted_folders[-1]
        return os.path.join(directory, recent_folder)
    else:
        return "find_recent_folder의 오류"

def find_recent_file_in_folder(folder):
    entries = os.listdir(folder)
    files = [entry for entry in entries if os.path.isfile(os.path.join(folder, entry))]
    if files:
        recent_file = max(files, key=lambda file: os.path.getctime(os.path.join(folder, file)))
        return os.path.join(folder, recent_file)
    else:
        return "find_recent_file_in_folder의 오류"

def find_recent_file(directory):
    recent_folder = find_recent_folder(directory)
    if recent_folder:
        return find_recent_file_in_folder(recent_folder)
    else:
        return "find_recent_file의 오류"


#3차 인공지능
#구글 비전 api에서 따로 연결 해줘야 가능
import re
from google.cloud import vision
from google.oauth2 import service_account

# 추출된 텍스트를 숫자로 필터링하는 함수
def filter_numbers(text):
    numbers = re.findall(r'\d+', text)  # 정규식을 사용하여 숫자 추출
    return numbers

# 이미지로부터 숫자를 추출하는 함수
def extract_numbers_from_image(image_path):
    # Vision API 클라이언트 인증 정보 설정
    credentials = service_account.Credentials.from_service_account_file('C:/Users/db030/Desktop/aimodel/imagetext-387412-bab717bcee7f.json')
    client = vision.ImageAnnotatorClient(credentials=credentials)

    # 이미지 읽어오기
    with open(image_path, 'rb') as image_file:
        content = image_file.read()

    # Image 객체 생성 및 이미지 속성 설정
    image = vision.Image(content=content)

    # 이미지에 대한 텍스트 감지 요청
    response = client.text_detection(image=image)
    texts = response.text_annotations

    extracted_numbers = []
    if texts:
        for text in texts:
            numbers = filter_numbers(text.description)
            extracted_numbers.extend(numbers)

    return extracted_numbers

# 추출된 숫자 리스트를 문자열로 변환하는 함수
def convert_numbers_to_string(numbers):
    return ''.join(numbers)

# 추출된 숫자 리스트에서 마지막 값 제거하는 함수
def remove_last_value(numbers):
    if numbers:
        return numbers[:-1]
    return numbers

# 이미지로부터 숫자를 추출하고 처리하는 함수
def process_image(image_path):
    extracted_numbers = extract_numbers_from_image(image_path)
    string_num = convert_numbers_to_string(extracted_numbers)
    # updated_string_num = remove_last_value(string_num)
    return string_num
